//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 4 colors.
  struct color {
    /// Color `ListBackground`.
    static let listBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "ListBackground")
    /// Color `ThemeTransculed`.
    static let themeTransculed = Rswift.ColorResource(bundle: R.hostingBundle, name: "ThemeTransculed")
    /// Color `Theme`.
    static let theme = Rswift.ColorResource(bundle: R.hostingBundle, name: "Theme")
    /// Color `UsedCoupon`.
    static let usedCoupon = Rswift.ColorResource(bundle: R.hostingBundle, name: "UsedCoupon")
    
    /// `UIColor(named: "ListBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func listBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.listBackground, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Theme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func theme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.theme, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "ThemeTransculed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func themeTransculed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.themeTransculed, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "UsedCoupon", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func usedCoupon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.usedCoupon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 3 images.
  struct image {
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `unwish`.
    static let unwish = Rswift.ImageResource(bundle: R.hostingBundle, name: "unwish")
    /// Image `wish`.
    static let wish = Rswift.ImageResource(bundle: R.hostingBundle, name: "wish")
    
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unwish", bundle: ..., traitCollection: ...)`
    static func unwish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unwish, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wish", bundle: ..., traitCollection: ...)`
    static func wish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wish, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `CouponCell`.
    static let couponCell = _R.nib._CouponCell()
    
    /// `UINib(name: "CouponCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.couponCell) instead")
    static func couponCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.couponCell)
    }
    
    static func couponCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CouponCell? {
      return R.nib.couponCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CouponCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CouponCell`.
    static let couponCell: Rswift.ReuseIdentifier<CouponCell> = Rswift.ReuseIdentifier(identifier: "CouponCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `CouponDetail`.
    static let couponDetail = _R.storyboard.couponDetail()
    /// Storyboard `CouponList`.
    static let couponList = _R.storyboard.couponList()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "CouponDetail", bundle: ...)`
    static func couponDetail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.couponDetail)
    }
    
    /// `UIStoryboard(name: "CouponList", bundle: ...)`
    static func couponList(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.couponList)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 11 localization keys.
    struct localizable {
      /// Value: ¥ %@ OFF COUPON
      static let priceDownText = Rswift.StringResource(key: "priceDownText", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ■使うボタンについて 店員にクーポン画面をお見せください。  「使う」ボタンは使用回数が一度きりのクーポンですので、店員に見せるまで使用しないでください。  ■注意事項 他フェア、サービスとの併用は不可となります。  ■利用条件 有効期限内に、1回のみクーポンを使用できます。 
      static let descriptionLabelText = Rswift.StringResource(key: "descriptionLabelText", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: お使いになる前のご確認
      static let confirmTitleLabelText = Rswift.StringResource(key: "confirmTitleLabelText", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: クーポン一覧
      static let titleLabelText = Rswift.StringResource(key: "titleLabelText", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: クーポン表示後、期限をすぎると使用できなくなります。お使いになる前に、今一度、注意事項をご確認ください。 ※「使う」をタップすると取り消しできません。
      static let confirmDescriptionLabelText = Rswift.StringResource(key: "confirmDescriptionLabelText", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 今は使わない
      static let dontUseNowButtonText = Rswift.StringResource(key: "dontUseNowButtonText", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 使う
      static let useButtonText = Rswift.StringResource(key: "useButtonText", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 利用済み
      static let expiredTitleUsedText = Rswift.StringResource(key: "expiredTitleUsedText", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 有効期限
      static let expiredTitleText = Rswift.StringResource(key: "expiredTitleText", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 本当に使いますか？
      static let confirmMessageLabelText = Rswift.StringResource(key: "confirmMessageLabelText", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 現在ご利用できるクーポンはがありません。
      static let noCouponText = Rswift.StringResource(key: "noCouponText", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: ¥ %@ OFF COUPON
      static func priceDownText(_ value1: String) -> String {
        return String(format: NSLocalizedString("priceDownText", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: ■使うボタンについて 店員にクーポン画面をお見せください。  「使う」ボタンは使用回数が一度きりのクーポンですので、店員に見せるまで使用しないでください。  ■注意事項 他フェア、サービスとの併用は不可となります。  ■利用条件 有効期限内に、1回のみクーポンを使用できます。 
      static func descriptionLabelText(_: Void = ()) -> String {
        return NSLocalizedString("descriptionLabelText", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: お使いになる前のご確認
      static func confirmTitleLabelText(_: Void = ()) -> String {
        return NSLocalizedString("confirmTitleLabelText", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: クーポン一覧
      static func titleLabelText(_: Void = ()) -> String {
        return NSLocalizedString("titleLabelText", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: クーポン表示後、期限をすぎると使用できなくなります。お使いになる前に、今一度、注意事項をご確認ください。 ※「使う」をタップすると取り消しできません。
      static func confirmDescriptionLabelText(_: Void = ()) -> String {
        return NSLocalizedString("confirmDescriptionLabelText", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 今は使わない
      static func dontUseNowButtonText(_: Void = ()) -> String {
        return NSLocalizedString("dontUseNowButtonText", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 使う
      static func useButtonText(_: Void = ()) -> String {
        return NSLocalizedString("useButtonText", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 利用済み
      static func expiredTitleUsedText(_: Void = ()) -> String {
        return NSLocalizedString("expiredTitleUsedText", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 有効期限
      static func expiredTitleText(_: Void = ()) -> String {
        return NSLocalizedString("expiredTitleText", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 本当に使いますか？
      static func confirmMessageLabelText(_: Void = ()) -> String {
        return NSLocalizedString("confirmMessageLabelText", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 現在ご利用できるクーポンはがありません。
      static func noCouponText(_: Void = ()) -> String {
        return NSLocalizedString("noCouponText", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CouponCell.validate()
    }
    
    struct _CouponCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CouponCell
      
      let bundle = R.hostingBundle
      let identifier = "CouponCell"
      let name = "CouponCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CouponCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CouponCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "wish", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wish' is used in nib 'CouponCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "Theme", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Theme' is used in storyboard 'CouponCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "UsedCoupon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'UsedCoupon' is used in storyboard 'CouponCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try couponDetail.validate()
      try couponList.validate()
      try launchScreen.validate()
    }
    
    struct couponDetail: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CouponDetailViewController
      
      let bundle = R.hostingBundle
      let couponDetailViewController = StoryboardViewControllerResource<CouponDetailViewController>(identifier: "CouponDetailViewController")
      let name = "CouponDetail"
      
      func couponDetailViewController(_: Void = ()) -> CouponDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: couponDetailViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in storyboard 'CouponDetail', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "Theme", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Theme' is used in storyboard 'CouponDetail', but couldn't be loaded.") }
          if UIKit.UIColor(named: "ThemeTransculed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ThemeTransculed' is used in storyboard 'CouponDetail', but couldn't be loaded.") }
        }
        if _R.storyboard.couponDetail().couponDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'couponDetailViewController' could not be loaded from storyboard 'CouponDetail' as 'CouponDetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct couponList: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CouponListViewController
      
      let bundle = R.hostingBundle
      let name = "CouponList"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "ListBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ListBackground' is used in storyboard 'CouponList', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Theme", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Theme' is used in storyboard 'CouponList', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
